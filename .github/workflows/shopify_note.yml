name: Add Shopify Note from Zendesk

on:
  repository_dispatch:
    types: [shopify_order_note]

jobs:
  update-shopify-order:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Run Shopify Update Script
        env:
          ORDER_NUMBER: ${{ github.event.client_payload.order_number }}
          TICKET_ID: ${{ github.event.client_payload.ticket_id }}
          ZENDESK_SUBDOMAIN: your_zendesk_subdomain
          ZENDESK_EMAIL: your_zendesk_email
          ZENDESK_TOKEN: ${{ secrets.ZENDESK_TOKEN }}
          SHOPIFY_DOMAIN: yourshop.myshopify.com
          SHOPIFY_TOKEN: ${{ secrets.SHOPIFY_TOKEN }}
        run: |
          python <<'EOF'
          import os
          import requests

          order_number = os.getenv("ORDER_NUMBER")
          ticket_id = os.getenv("TICKET_ID")
          zendesk_subdomain = os.getenv("SUBDOMAIN")
          zendesk_email = os.getenv("EMAIL")
          zendesk_token = os.getenv("TOKEN")
          shopify_domain = os.getenv("SHOPIFY_DOMAIN")
          shopify_token = os.getenv("SHOPIFY_TOKEN")

          # 1. Get first requester message from Zendesk
          zd_url = f"https://{zendesk_subdomain}.zendesk.com/api/v2/tickets/{ticket_id}/comments.json"
          zd_res = requests.get(zd_url, auth=(f"{zendesk_email}/token", zendesk_token))
          zd_res.raise_for_status()
          comments = zd_res.json()["comments"]

          # Filter only requester messages
          requester_comments = [c for c in comments if c['author_id'] == comments[0]['author_id']]
          if not requester_comments:
              raise SystemExit("No requester messages found")
          first_msg = requester_comments[0]["body"]

          # 2. Find Shopify order ID
          shopify_url = f"https://{shopify_domain}/admin/api/2025-01/orders.json?name={order_number}"
          headers = {"X-Shopify-Access-Token": shopify_token}
          shopify_res = requests.get(shopify_url, headers=headers)
          shopify_res.raise_for_status()
          orders = shopify_res.json().get("orders", [])
          if not orders:
              raise SystemExit(f"No order found for {order_number}")
          order_id = orders[0]["id"]

          # 3. Add note to Shopify order
          update_url = f"https://{shopify_domain}/admin/api/2025-01/orders/{order_id}.json"
          payload = {"order": {"id": order_id, "note": first_msg}}
          update_res = requests.put(update_url, headers=headers, json=payload)
          update_res.raise_for_status()

          print(f"âœ… Added note to Shopify order {order_number}")
          EOF
